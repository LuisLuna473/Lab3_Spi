
SlaveNano.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000454  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ab8  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007fb  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000063e  00000000  00000000  0000180f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00001e50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000585  00000000  00000000  00001fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c9  00000000  00000000  00002535  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000028fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 1a 01 	jmp	0x234	; 0x234 <__vector_16>
  44:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__vector_17>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_21>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	61 00       	.word	0x0061	; ????
  6a:	6c 00       	.word	0x006c	; ????
  6c:	7a 00       	.word	0x007a	; ????
  6e:	88 00       	.word	0x0088	; ????
  70:	96 00       	.word	0x0096	; ????
  72:	a4 00       	.word	0x00a4	; ????
  74:	b2 00       	.word	0x00b2	; ????
  76:	bb 00       	.word	0x00bb	; ????
  78:	99 01       	movw	r18, r18
  7a:	a0 01       	movw	r20, r0
  7c:	a7 01       	movw	r20, r14
  7e:	b1 01       	movw	r22, r2
  80:	bb 01       	movw	r22, r22
  82:	c5 01       	movw	r24, r10
  84:	cf 01       	movw	r24, r30

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a3 30       	cpi	r26, 0x03	; 3
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  a6:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <SetupADC>:
 * Created: 25/07/2024 20:47:32
 *  Author: luisa
 */ 
#include "ADC.h"
void SetupADC(uint8_t PinADC){
	switch (PinADC)
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	88 30       	cpi	r24, 0x08	; 8
  b2:	91 05       	cpc	r25, r1
  b4:	08 f0       	brcs	.+2      	; 0xb8 <SetupADC+0xa>
  b6:	67 c0       	rjmp	.+206    	; 0x186 <SetupADC+0xd8>
  b8:	fc 01       	movw	r30, r24
  ba:	ec 5c       	subi	r30, 0xCC	; 204
  bc:	ff 4f       	sbci	r31, 0xFF	; 255
  be:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__tablejump2__>
	{
		case PC0 :
		DIDR0 |= (1<<ADC0D);
  c2:	ee e7       	ldi	r30, 0x7E	; 126
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
  cc:	ec e7       	ldi	r30, 0x7C	; 124
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 7f       	andi	r24, 0xF8	; 248
  d4:	80 83       	st	Z, r24
		break;
  d6:	57 c0       	rjmp	.+174    	; 0x186 <SetupADC+0xd8>
		case PC1 :
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
  d8:	ec e7       	ldi	r30, 0x7C	; 124
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	88 7f       	andi	r24, 0xF8	; 248
  e0:	80 83       	st	Z, r24
		ADMUX|=(1<<MUX0);
  e2:	80 81       	ld	r24, Z
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	80 83       	st	Z, r24
		DIDR0 |= (1<<ADC1D);
  e8:	ee e7       	ldi	r30, 0x7E	; 126
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	82 60       	ori	r24, 0x02	; 2
  f0:	80 83       	st	Z, r24
		break;
  f2:	49 c0       	rjmp	.+146    	; 0x186 <SetupADC+0xd8>
		case PC2 :
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
  f4:	ec e7       	ldi	r30, 0x7C	; 124
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	88 7f       	andi	r24, 0xF8	; 248
  fc:	80 83       	st	Z, r24
		ADMUX|=(1<<MUX1);
  fe:	80 81       	ld	r24, Z
 100:	82 60       	ori	r24, 0x02	; 2
 102:	80 83       	st	Z, r24
		DIDR0 |= (1<<ADC2D);
 104:	ee e7       	ldi	r30, 0x7E	; 126
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	84 60       	ori	r24, 0x04	; 4
 10c:	80 83       	st	Z, r24
		break;
 10e:	3b c0       	rjmp	.+118    	; 0x186 <SetupADC+0xd8>
		case PC3 :
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 110:	ec e7       	ldi	r30, 0x7C	; 124
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	88 7f       	andi	r24, 0xF8	; 248
 118:	80 83       	st	Z, r24
		ADMUX|=(1<<MUX0)|(1<<MUX1);
 11a:	80 81       	ld	r24, Z
 11c:	83 60       	ori	r24, 0x03	; 3
 11e:	80 83       	st	Z, r24
		DIDR0 |= (1<<ADC3D);
 120:	ee e7       	ldi	r30, 0x7E	; 126
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	88 60       	ori	r24, 0x08	; 8
 128:	80 83       	st	Z, r24
		break;
 12a:	2d c0       	rjmp	.+90     	; 0x186 <SetupADC+0xd8>
		case PC4 :
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 12c:	ec e7       	ldi	r30, 0x7C	; 124
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	88 7f       	andi	r24, 0xF8	; 248
 134:	80 83       	st	Z, r24
		ADMUX|=(1<<MUX2);
 136:	80 81       	ld	r24, Z
 138:	84 60       	ori	r24, 0x04	; 4
 13a:	80 83       	st	Z, r24
		DIDR0 |= (1<<ADC4D);
 13c:	ee e7       	ldi	r30, 0x7E	; 126
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	80 61       	ori	r24, 0x10	; 16
 144:	80 83       	st	Z, r24
		break;
 146:	1f c0       	rjmp	.+62     	; 0x186 <SetupADC+0xd8>
		case PC5 :
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 148:	ec e7       	ldi	r30, 0x7C	; 124
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	88 7f       	andi	r24, 0xF8	; 248
 150:	80 83       	st	Z, r24
		ADMUX|=(1<<MUX2)|(1<<MUX0);
 152:	80 81       	ld	r24, Z
 154:	85 60       	ori	r24, 0x05	; 5
 156:	80 83       	st	Z, r24
		DIDR0 |= (1<<ADC5D);
 158:	ee e7       	ldi	r30, 0x7E	; 126
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	80 62       	ori	r24, 0x20	; 32
 160:	80 83       	st	Z, r24
		break;
 162:	11 c0       	rjmp	.+34     	; 0x186 <SetupADC+0xd8>
		case PC6 :
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 164:	ec e7       	ldi	r30, 0x7C	; 124
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	88 7f       	andi	r24, 0xF8	; 248
 16c:	80 83       	st	Z, r24
		ADMUX|=(1<<MUX2)|(1<<MUX1);
 16e:	80 81       	ld	r24, Z
 170:	86 60       	ori	r24, 0x06	; 6
 172:	80 83       	st	Z, r24
		break;
 174:	08 c0       	rjmp	.+16     	; 0x186 <SetupADC+0xd8>
		case PC7 :
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 176:	ec e7       	ldi	r30, 0x7C	; 124
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	88 7f       	andi	r24, 0xF8	; 248
 17e:	80 83       	st	Z, r24
		ADMUX|=(1<<MUX2)|(1<<MUX1)|(1<<MUX0);
 180:	80 81       	ld	r24, Z
 182:	87 60       	ori	r24, 0x07	; 7
 184:	80 83       	st	Z, r24
		break;
	}
	//JUSTIFICACION IZQUIERDA
	ADMUX |= (1<<ADLAR);
 186:	ec e7       	ldi	r30, 0x7C	; 124
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	80 62       	ori	r24, 0x20	; 32
 18e:	80 83       	st	Z, r24
	//REFERENCIA INTERNA
	ADMUX |= (1<<REFS0);
 190:	80 81       	ld	r24, Z
 192:	80 64       	ori	r24, 0x40	; 64
 194:	80 83       	st	Z, r24
	// HABILITAR INTERRUPCION
	ADCSRA |= (1<<ADIE);
 196:	ea e7       	ldi	r30, 0x7A	; 122
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	88 60       	ori	r24, 0x08	; 8
 19e:	80 83       	st	Z, r24
	//PRESCALER 128
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 1a0:	80 81       	ld	r24, Z
 1a2:	87 60       	ori	r24, 0x07	; 7
 1a4:	80 83       	st	Z, r24
	//HABILITAR
	ADCSRA |= (1<<ADEN);
 1a6:	80 81       	ld	r24, Z
 1a8:	80 68       	ori	r24, 0x80	; 128
 1aa:	80 83       	st	Z, r24
 1ac:	08 95       	ret

000001ae <initTimer0>:
    {
    }
}

void initTimer0(void){
	TCCR0B |= (1<<CS00)|(1<<CS02);
 1ae:	85 b5       	in	r24, 0x25	; 37
 1b0:	85 60       	ori	r24, 0x05	; 5
 1b2:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 220;
 1b4:	8c ed       	ldi	r24, 0xDC	; 220
 1b6:	86 bd       	out	0x26, r24	; 38
	TIMSK0 |= (1<<TOIE0);
 1b8:	ee e6       	ldi	r30, 0x6E	; 110
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	81 60       	ori	r24, 0x01	; 1
 1c0:	80 83       	st	Z, r24
 1c2:	08 95       	ret

000001c4 <main>:
volatile uint8_t Turno = 0; 


int main(void)
{
	SetupADC(PC5);
 1c4:	85 e0       	ldi	r24, 0x05	; 5
 1c6:	0e 94 57 00 	call	0xae	; 0xae <SetupADC>
	SetupADC(PC6); 
 1ca:	86 e0       	ldi	r24, 0x06	; 6
 1cc:	0e 94 57 00 	call	0xae	; 0xae <SetupADC>
    spiInit(SPI_SLAVE_SS, SPI_DATA_ORDER_MSB, SPI_CLOCK_IDLE_LOW, SPI_CLOCK_FIRST_EDGE);
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	80 e4       	ldi	r24, 0x40	; 64
 1d8:	0e 94 82 01 	call	0x304	; 0x304 <spiInit>
	initTimer0();
 1dc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <initTimer0>
	
	SPCR |= (1<<SPIE); //Activar ISR SPI
 1e0:	8c b5       	in	r24, 0x2c	; 44
 1e2:	80 68       	ori	r24, 0x80	; 128
 1e4:	8c bd       	out	0x2c, r24	; 44
	sei(); 
 1e6:	78 94       	sei
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <main+0x24>

000001ea <__vector_21>:
	TCCR0B |= (1<<CS00)|(1<<CS02);
	TCNT0 = 220;
	TIMSK0 |= (1<<TOIE0);
}

ISR(ADC_vect){
 1ea:	1f 92       	push	r1
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
 1f4:	8f 93       	push	r24
 1f6:	ef 93       	push	r30
 1f8:	ff 93       	push	r31
	switch(Turno){
 1fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1fe:	88 23       	and	r24, r24
 200:	19 f0       	breq	.+6      	; 0x208 <__vector_21+0x1e>
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	31 f0       	breq	.+12     	; 0x212 <__vector_21+0x28>
 206:	09 c0       	rjmp	.+18     	; 0x21a <__vector_21+0x30>
		case 0:
		POT1 = ADCH;
 208:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 20c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <POT1>
		break;
 210:	04 c0       	rjmp	.+8      	; 0x21a <__vector_21+0x30>
		case 1:
		POT2 = ADCH;
 212:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 216:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <POT2>
		break;
		default:
		break;
	}
	ADCSRA |= (1<<ADIF);
 21a:	ea e7       	ldi	r30, 0x7A	; 122
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	80 61       	ori	r24, 0x10	; 16
 222:	80 83       	st	Z, r24
}
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	8f 91       	pop	r24
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <__vector_16>:

ISR(TIMER0_OVF_vect){
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	8f 93       	push	r24
 240:	ef 93       	push	r30
 242:	ff 93       	push	r31
	switch(Turno){
 244:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 248:	88 23       	and	r24, r24
 24a:	19 f0       	breq	.+6      	; 0x252 <__vector_16+0x1e>
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	69 f0       	breq	.+26     	; 0x26a <__vector_16+0x36>
 250:	16 c0       	rjmp	.+44     	; 0x27e <__vector_16+0x4a>
		case 0:
		Turno = 1;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2)); //PC5
 258:	ec e7       	ldi	r30, 0x7C	; 124
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	88 7f       	andi	r24, 0xF8	; 248
 260:	80 83       	st	Z, r24
		ADMUX|=(1<<MUX2)|(1<<MUX0);
 262:	80 81       	ld	r24, Z
 264:	85 60       	ori	r24, 0x05	; 5
 266:	80 83       	st	Z, r24
		break;
 268:	0a c0       	rjmp	.+20     	; 0x27e <__vector_16+0x4a>
		case 1:
		Turno = 0;
 26a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 26e:	ec e7       	ldi	r30, 0x7C	; 124
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	88 7f       	andi	r24, 0xF8	; 248
 276:	80 83       	st	Z, r24
		ADMUX|=(1<<MUX2)|(1<<MUX1);
 278:	80 81       	ld	r24, Z
 27a:	86 60       	ori	r24, 0x06	; 6
 27c:	80 83       	st	Z, r24
		break;
	}
	ADCSRA |= (1<<ADSC);
 27e:	ea e7       	ldi	r30, 0x7A	; 122
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	80 64       	ori	r24, 0x40	; 64
 286:	80 83       	st	Z, r24
	//TCNT0 = 250;
	TCNT0 = 220;
 288:	8c ed       	ldi	r24, 0xDC	; 220
 28a:	86 bd       	out	0x26, r24	; 38
	TIFR0 |= (1 << TOV0);
 28c:	85 b3       	in	r24, 0x15	; 21
 28e:	81 60       	ori	r24, 0x01	; 1
 290:	85 bb       	out	0x15, r24	; 21
}
 292:	ff 91       	pop	r31
 294:	ef 91       	pop	r30
 296:	8f 91       	pop	r24
 298:	0f 90       	pop	r0
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	0f 90       	pop	r0
 29e:	1f 90       	pop	r1
 2a0:	18 95       	reti

000002a2 <__vector_17>:

ISR(SPI_STC_vect){
 2a2:	1f 92       	push	r1
 2a4:	0f 92       	push	r0
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	0f 92       	push	r0
 2aa:	11 24       	eor	r1, r1
 2ac:	2f 93       	push	r18
 2ae:	3f 93       	push	r19
 2b0:	4f 93       	push	r20
 2b2:	5f 93       	push	r21
 2b4:	6f 93       	push	r22
 2b6:	7f 93       	push	r23
 2b8:	8f 93       	push	r24
 2ba:	9f 93       	push	r25
 2bc:	af 93       	push	r26
 2be:	bf 93       	push	r27
 2c0:	cf 93       	push	r28
 2c2:	ef 93       	push	r30
 2c4:	ff 93       	push	r31
	uint8_t spiValor = SPDR; 
 2c6:	ce b5       	in	r28, 0x2e	; 46
	if(spiValor == 'c'){
 2c8:	c3 36       	cpi	r28, 0x63	; 99
 2ca:	21 f4       	brne	.+8      	; 0x2d4 <__vector_17+0x32>
		spiWrite(POT1);
 2cc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <POT1>
 2d0:	0e 94 e6 01 	call	0x3cc	; 0x3cc <spiWrite>
		//
	}
	if(spiValor == 'd'){
 2d4:	c4 36       	cpi	r28, 0x64	; 100
 2d6:	21 f4       	brne	.+8      	; 0x2e0 <__vector_17+0x3e>
		spiWrite(POT2);
 2d8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <POT2>
 2dc:	0e 94 e6 01 	call	0x3cc	; 0x3cc <spiWrite>
	}
 2e0:	ff 91       	pop	r31
 2e2:	ef 91       	pop	r30
 2e4:	cf 91       	pop	r28
 2e6:	bf 91       	pop	r27
 2e8:	af 91       	pop	r26
 2ea:	9f 91       	pop	r25
 2ec:	8f 91       	pop	r24
 2ee:	7f 91       	pop	r23
 2f0:	6f 91       	pop	r22
 2f2:	5f 91       	pop	r21
 2f4:	4f 91       	pop	r20
 2f6:	3f 91       	pop	r19
 2f8:	2f 91       	pop	r18
 2fa:	0f 90       	pop	r0
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	0f 90       	pop	r0
 300:	1f 90       	pop	r1
 302:	18 95       	reti

00000304 <spiInit>:
 *  Author: luisa
 */ 
#include "SPI.h"

void spiInit(Spi_Type sType, Spi_Data_Order sDataOrder, Spi_Clock_Polarity sClockPolarity, Spi_Clock_Phase sClockPhase)
{
 304:	e8 2f       	mov	r30, r24
	//PB2 -> SS
	//PB3 -> MOSI
	//PB4 -> MISO
	//PB5 -> SCK Reloj
	if(sType & 0b00010000) //If Master Mode
 306:	84 ff       	sbrs	r24, 4
 308:	51 c0       	rjmp	.+162    	; 0x3ac <spiInit+0xa8>
	{
		DDRB |= (1<<DDB2)|(1<<DDB3)|(1<<DDB5); //SS, MOSI, SCK
 30a:	84 b1       	in	r24, 0x04	; 4
 30c:	8c 62       	ori	r24, 0x2C	; 44
 30e:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~(1<<DDB4); //MISO
 310:	84 b1       	in	r24, 0x04	; 4
 312:	8f 7e       	andi	r24, 0xEF	; 239
 314:	84 b9       	out	0x04, r24	; 4
		SPCR = (1<<MSTR); //Master
 316:	80 e1       	ldi	r24, 0x10	; 16
 318:	8c bd       	out	0x2c, r24	; 44
		uint8_t temp = sType & 0b00000111;
 31a:	e7 70       	andi	r30, 0x07	; 7
		switch(temp){
 31c:	8e 2f       	mov	r24, r30
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	87 30       	cpi	r24, 0x07	; 7
 322:	91 05       	cpc	r25, r1
 324:	08 f0       	brcs	.+2      	; 0x328 <spiInit+0x24>
 326:	4b c0       	rjmp	.+150    	; 0x3be <spiInit+0xba>
 328:	fc 01       	movw	r30, r24
 32a:	e4 5c       	subi	r30, 0xC4	; 196
 32c:	ff 4f       	sbci	r31, 0xFF	; 255
 32e:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__tablejump2__>
			case 0: //DIV2
			SPCR &= ~((1<<SPR1)|(1<<SPR0));
 332:	8c b5       	in	r24, 0x2c	; 44
 334:	8c 7f       	andi	r24, 0xFC	; 252
 336:	8c bd       	out	0x2c, r24	; 44
			SPSR |= (1<<SPI2X);
 338:	8d b5       	in	r24, 0x2d	; 45
 33a:	81 60       	ori	r24, 0x01	; 1
 33c:	8d bd       	out	0x2d, r24	; 45
			break;
 33e:	3f c0       	rjmp	.+126    	; 0x3be <spiInit+0xba>
			case 1: //DIV4
			SPCR &= ~((1<<SPR1)|(1<<SPR0));
 340:	8c b5       	in	r24, 0x2c	; 44
 342:	8c 7f       	andi	r24, 0xFC	; 252
 344:	8c bd       	out	0x2c, r24	; 44
			SPSR &= ~(1<<SPI2X);
 346:	8d b5       	in	r24, 0x2d	; 45
 348:	8e 7f       	andi	r24, 0xFE	; 254
 34a:	8d bd       	out	0x2d, r24	; 45
			break;
 34c:	38 c0       	rjmp	.+112    	; 0x3be <spiInit+0xba>
			case 2: //DIV8
			SPCR |= (1<<SPR0);
 34e:	8c b5       	in	r24, 0x2c	; 44
 350:	81 60       	ori	r24, 0x01	; 1
 352:	8c bd       	out	0x2c, r24	; 44
			SPCR &= ~(1<<SPR1);
 354:	8c b5       	in	r24, 0x2c	; 44
 356:	8d 7f       	andi	r24, 0xFD	; 253
 358:	8c bd       	out	0x2c, r24	; 44
			SPSR |= (1<<SPI2X);
 35a:	8d b5       	in	r24, 0x2d	; 45
 35c:	81 60       	ori	r24, 0x01	; 1
 35e:	8d bd       	out	0x2d, r24	; 45
			break;
 360:	2e c0       	rjmp	.+92     	; 0x3be <spiInit+0xba>
			case 3: //DIV16
			SPCR |= (1<<SPR0);
 362:	8c b5       	in	r24, 0x2c	; 44
 364:	81 60       	ori	r24, 0x01	; 1
 366:	8c bd       	out	0x2c, r24	; 44
			SPCR &= ~(1<<SPR1);
 368:	8c b5       	in	r24, 0x2c	; 44
 36a:	8d 7f       	andi	r24, 0xFD	; 253
 36c:	8c bd       	out	0x2c, r24	; 44
			SPSR &= ~(1<<SPI2X);
 36e:	8d b5       	in	r24, 0x2d	; 45
 370:	8e 7f       	andi	r24, 0xFE	; 254
 372:	8d bd       	out	0x2d, r24	; 45
			break;
 374:	24 c0       	rjmp	.+72     	; 0x3be <spiInit+0xba>
			case 4: //DIV32
			SPCR |= (1<<SPR0);
 376:	8c b5       	in	r24, 0x2c	; 44
 378:	81 60       	ori	r24, 0x01	; 1
 37a:	8c bd       	out	0x2c, r24	; 44
			SPCR |= (1<<SPR1);
 37c:	8c b5       	in	r24, 0x2c	; 44
 37e:	82 60       	ori	r24, 0x02	; 2
 380:	8c bd       	out	0x2c, r24	; 44
			SPSR &= ~(1<<SPI2X);
 382:	8d b5       	in	r24, 0x2d	; 45
 384:	8e 7f       	andi	r24, 0xFE	; 254
 386:	8d bd       	out	0x2d, r24	; 45
			break;
 388:	1a c0       	rjmp	.+52     	; 0x3be <spiInit+0xba>
			case 5: //DIV64
			SPCR &= ~(1<<SPR0);
 38a:	8c b5       	in	r24, 0x2c	; 44
 38c:	8e 7f       	andi	r24, 0xFE	; 254
 38e:	8c bd       	out	0x2c, r24	; 44
			SPCR |= (1<<SPR1);
 390:	8c b5       	in	r24, 0x2c	; 44
 392:	82 60       	ori	r24, 0x02	; 2
 394:	8c bd       	out	0x2c, r24	; 44
			SPSR &= ~(1<<SPI2X);
 396:	8d b5       	in	r24, 0x2d	; 45
 398:	8e 7f       	andi	r24, 0xFE	; 254
 39a:	8d bd       	out	0x2d, r24	; 45
			break;
 39c:	10 c0       	rjmp	.+32     	; 0x3be <spiInit+0xba>
			case 6: //DIV128
			SPCR |= (1<<SPR1)|(1<<SPR0);
 39e:	8c b5       	in	r24, 0x2c	; 44
 3a0:	83 60       	ori	r24, 0x03	; 3
 3a2:	8c bd       	out	0x2c, r24	; 44
			SPSR &= ~(1<<SPI2X);
 3a4:	8d b5       	in	r24, 0x2d	; 45
 3a6:	8e 7f       	andi	r24, 0xFE	; 254
 3a8:	8d bd       	out	0x2d, r24	; 45
			break;
 3aa:	09 c0       	rjmp	.+18     	; 0x3be <spiInit+0xba>
		}
	}
	else //If Slave
	{
		DDRB |= (1<<DDB4); //MISO
 3ac:	84 b1       	in	r24, 0x04	; 4
 3ae:	80 61       	ori	r24, 0x10	; 16
 3b0:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~((1<<DDB3)|(1<<DDB5)|(1<<DDB2)); //MOSI, SCK, SS
 3b2:	84 b1       	in	r24, 0x04	; 4
 3b4:	83 7d       	andi	r24, 0xD3	; 211
 3b6:	84 b9       	out	0x04, r24	; 4
		SPCR &= ~(1<<MSTR); //Slave
 3b8:	8c b5       	in	r24, 0x2c	; 44
 3ba:	8f 7e       	andi	r24, 0xEF	; 239
 3bc:	8c bd       	out	0x2c, r24	; 44
	}
	/*Enable SPI, Data Order, Clock Polarity, Clock Phase*/
	SPCR |= (1<<SPE)|sDataOrder|sClockPolarity|sClockPhase;
 3be:	8c b5       	in	r24, 0x2c	; 44
 3c0:	46 2b       	or	r20, r22
 3c2:	24 2b       	or	r18, r20
 3c4:	28 2b       	or	r18, r24
 3c6:	20 64       	ori	r18, 0x40	; 64
 3c8:	2c bd       	out	0x2c, r18	; 44
 3ca:	08 95       	ret

000003cc <spiWrite>:
	
}

void spiWrite(uint8_t dat){ //Escribe datos al bus para SPI
	SPDR = dat;
 3cc:	8e bd       	out	0x2e, r24	; 46
 3ce:	08 95       	ret

000003d0 <__tablejump2__>:
 3d0:	ee 0f       	add	r30, r30
 3d2:	ff 1f       	adc	r31, r31
 3d4:	05 90       	lpm	r0, Z+
 3d6:	f4 91       	lpm	r31, Z
 3d8:	e0 2d       	mov	r30, r0
 3da:	09 94       	ijmp

000003dc <_exit>:
 3dc:	f8 94       	cli

000003de <__stop_program>:
 3de:	ff cf       	rjmp	.-2      	; 0x3de <__stop_program>
